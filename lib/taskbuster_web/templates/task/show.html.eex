<h1>Show Task</h1>

<ul>

  <li>
    <strong>Title:</strong>
    <%= @task.title %>
  </li>

  <li>
    <strong>Description:</strong>
    <%= @task.description %>
  </li>

</ul>

<h3>New comment</h3>

<%= form_for @conn, Routes.task_comment_path(@conn, :create, @task), [method: :post, as: :comment], fn f -> %>
  <%= label f, :body %>
  <%= textarea f, :body %>

  <div>
    <%= submit "Submit" %>
  </div>
<% end %>

<div id="comments">
<%= for comment <- @task.comments do %>
  <div>
    <p><strong>@<%= comment.author.username %></strong>: <%= comment.body %></p>

    <p>
      <%= link "Show", to: Routes.task_comment_path(@conn, :show, @task, comment) %> &nbsp;
      <%= link "Edit", to: Routes.task_comment_path(@conn, :edit, @task, comment) %> &nbsp;
      <%= link "Delete", to: Routes.task_comment_path(@conn, :delete, @task, comment), method: :delete, data: [confirm: "Are you sure?"] %>
    </p>
  </div>
<% end %>
</div>

<span><%= link "Edit", to: Routes.task_path(@conn, :edit, @task) %></span>
<span><%= link "Back", to: Routes.task_path(@conn, :index) %></span>

<script type="text/javascript">
let channel = socket.channel("task:<%= @task.id %>", {})
let comments = document.querySelector("#comments")

channel.on("new_comment", payload => {
  let comment = document.createElement("div")
  comment.innerHTML = `<p><strong>@${payload.username}</strong>: ${payload.body}</p>`
  comments.appendChild(comment)
})

channel.join()
  .receive("ok", resp => { console.log("Joined successfully", resp) })
  .receive("error", resp => { console.log("Unable to join", resp) })
</script>
